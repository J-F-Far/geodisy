Fully Qualified Domain Name of your host: 206-12-89-155.cloud.computecanada.ca
Glassfish service account username: glassfish
Glassfish Directory: /usr/local/glassfish4
Administrator email address for this Dataverse: paul.dante@ubc.ca
SMTP (mail) server (and port) to relay notification messages: 127.0.0.1:25
Postgres Server Address: 127.0.0.1
Postgres Server Port: 5432
Postgres ADMIN password: secret
Name of the Postgres Database: dvndb
Name of the Postgres User: dvnapp
Postgres user password: geodisy
Remote SOLR indexing service: LOCAL
Rserve Server: localhost
Rserve Server Port: 6311
Rserve User Name: rserve
Rserve User Password: rserve
Datacite username: dataciteuser
Datacite password: datacitepassword
Datacite URL: https://mds.test.datacite.org

________________________________________________________________________________
If the Dataverse VM crashes, to restart Dataverse
systemctl enable nginx
./usr/local/glassfish4/glassfish/bin/asadmin start-domain
________________________________________________________________________________
setting up SSL in Dataverse

Hereâ€™s how to enable the SSL proxy for the Dataverse instance. On the instance Dataverse is running on:

- Install Nginx

yum install nginx
systemctl enable nginx
systemctl start nginx
setsebool -P httpd_can_network_relay 1

- Install Certbot (change the hostname below to the one you are using)
yum install python2-certbot-nginx
certbot --nginx -d 206-12-90-131.cloud.computecanada.ca

Test in a browser
https://www.ssllabs.com/ssltest/analyze.html?d=206-12-90-54.cloud.computecanada.ca

Note: cerbot renew will need to be run every 3 months to renew the certificates
Also need to make sure ports 80 and 443 are open to the Internet when performing this step; they can
be locked down after.

- Configure Nginx 

In /etc/nginx/nginx.conf, add the following to the file after line 98:

location / {
                     proxy_pass http://127.0.0.1:8080;
                     proxy_set_header Host $host;
                     proxy_set_header X-Real-IP $remote_addr;
                     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           }

Then systemctl restart nginx

- Test in a browser
Go to the URL of the floating ip and it should present a Dataverse protected by SSL.

________________________________________________________________________________
#example nginx.conf

# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2 default_server;
#        listen       [::]:443 ssl http2 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers HIGH:!aNULL:!MD5;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#        }
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }



    server {
						 
							  
    server_name 206-12-89-155.cloud.computecanada.ca; # managed by Certbot
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

			 
													  
												 
															 
																				 
			

        location / {
		proxy_pass http://127.0.0.1:8080;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;	
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/206-12-89-155.cloud.computecanada.ca/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/206-12-89-155.cloud.computecanada.ca/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

    server {
    if ($host = 206-12-89-155.cloud.computecanada.ca) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        listen       80 ;
        listen       [::]:80 ;
    server_name 206-12-89-155.cloud.computecanada.ca;
    return 404; # managed by Certbot


}}


----------------------------------------------------------------------------------------------------------------------------------------------
Uploading a dataset via Metadata json commandline

curl -H "X-Dataverse-key: {api key}" -X POST {Dataverse server URL}/api/dataverses/bam/datasets --upload-file {dataverse metadata json}

//what worked for me was setting the api key as a variable called API_KEY and then putting $API_KEY into the above
//I ran this from the folder of the json file, but I would assume it would work if you gave the path and file name  


